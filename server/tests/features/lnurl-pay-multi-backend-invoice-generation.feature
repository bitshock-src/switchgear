@integration @lnurl-pay @multi-backend
Feature: LNURL Pay offer-to-backend mapping
  As a payer
  I want to request invoices from different payees' offers
  So that each invoice is generated by the correct payee's lightning node

  # This feature tests that offers are correctly mapped to their respective lightning nodes.
  # Two payees each have exclusive access to their own lightning node (one uses LND, one uses CLN).
  # The system must ensure that when a payer requests an invoice from a specific offer,
  # it is generated by the correct payee's node and not by any other node.
  # Note: This feature assumes the server is already running with backends available

  Background:
    Given two payees each have their own lightning node
    And all services should be listening on their configured ports

  @no-backends @offer-mapping
  Scenario: No backends available - no invoices can be generated
    # Test that when no backends are available, neither offer can generate invoices
    When the first payee creates an offer for their lightning node
    And the second payee creates an offer for their lightning node
    But no lightning node backends are registered
    When the payer requests the LNURL offer from the first payee
    And the payer requests an invoice for 100 sats using the first payee's callback URL
    Then the invoice request should fail with a "no backends available" error
    When the payer requests the LNURL offer from the second payee
    And the payer requests an invoice for 100 sats using the second payee's callback URL
    Then the invoice request should fail with a "no backends available" error

  @one-backend @offer-mapping @isolation
  Scenario Outline: One backend available - only its linked offer can generate invoices
    # Test that when only one backend is available, only its linked offer works
    # This ensures that offer-to-backend mapping works correctly for both LND and CLN
    Given the first payee has exclusive access to a <first_node_type> lightning node
    And the second payee has exclusive access to a <second_node_type> lightning node
    When the first payee creates an offer for their lightning node
    And the second payee creates an offer for their lightning node
    But only the first payee's node is registered as a backend
    And the system waits for backend readiness
    
    # First payee's offer should work (backend available)
    When the payer requests the LNURL offer from the first payee
    And the payer requests an invoice for 100 sats using the first payee's callback URL
    Then the payer should receive a valid Lightning invoice
    And the invoice amount should be 100000 millisatoshis
    
    # Second payee's offer should be accessible but invoice generation should fail
    When the payer requests the LNURL offer from the second payee
    Then the offer should contain valid sendable amounts
    And the offer should contain valid metadata
    And the offer should provide a callback URL
    But when the payer requests an invoice for 100 sats using the second payee's callback URL
    Then the invoice request should fail with an "internal server error" status

    Examples:
      | first_node_type | second_node_type |
      | CLN             | LND              |
      | LND             | CLN              |

  @two-backends @offer-mapping @happy-path
  Scenario: Two backends available - both offers can generate invoices
    # Test that when both backends are available, both offers work correctly
    Given the first payee has exclusive access to one lightning node
    And the second payee has exclusive access to a different lightning node
    When the first payee creates an offer for their lightning node
    And the second payee creates an offer for their lightning node
    And both nodes are registered as separate backends
    And the system waits for backend readiness
    
    # Both offers should work
    When the payer requests the LNURL offer from the first payee
    And the payer requests an invoice for 100 sats using the first payee's callback URL
    Then the payer should receive a valid Lightning invoice
    And the invoice amount should be 100000 millisatoshis
    And the invoice description hash should match the metadata hash
    When the payer requests the LNURL offer from the second payee
    And the payer requests an invoice for 100 sats using the second payee's callback URL
    Then the payer should receive a valid Lightning invoice
    And the invoice amount should be 100000 millisatoshis
    And the invoice description hash should match the metadata hash