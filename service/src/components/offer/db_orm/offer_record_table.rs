//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "offer_record_table")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub partition: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub max_sendable: i64,
    pub min_sendable: i64,
    pub metadata_id: Uuid,
    pub timestamp: DateTimeWithTimeZone,
    pub expires: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::offer_metadata_table::Entity",
        from = "(Column::Partition, Column::MetadataId)",
        to = "(super::offer_metadata_table::Column::Partition, super::offer_metadata_table::Column::Id)",
        on_delete = "Restrict"
    )]
    OfferMetadataTable,
}

impl Related<super::offer_metadata_table::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OfferMetadataTable.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
